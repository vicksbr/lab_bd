
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author puzzi
 */
public class GuiDB extends javax.swing.JFrame {

    /**
     * Creates new form bd_gui
     */
    public GuiDB() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Gerar Relatório");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Relatorio 1", "Relatorio 2", "Relatorio 3", "Relatorio 4", "Relatorio 5", "Relatorio 6", "Relatorio 7", "Relatorio 8", "Relatorio 9" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
    
        reportBD tentativa = new reportBD();      
        String sqlquery = null;
        String escolhaRelat = (String)jComboBox1.getSelectedItem();

        String parametro = null;
        
        switch (escolhaRelat) {
            case "Relatorio 1":
                parametro = JOptionPane.showInputDialog("Insira o ano desejado");
                sqlquery =  "SELECT  \n" +
                            "metodo.NOME as TRANSPORTADORA,\n" +
                            "EXTRACT(MONTH FROM ven.DATA_VENDA) as MES,\n" +
                            "SUM(CASE WHEN VEN.SUBTOTAL < 1000 THEN VEN.FRETE ELSE 0 END) as \"TOTAL < 1000\",\n" +
                            "SUM(CASE WHEN VEN.SUBTOTAL > 1000 THEN VEN.FRETE ELSE 0 END) as \"TOTAL > 1000\"\n" +
                            "FROM  \n" +
                            "VENDA ven \n" +
                            "INNER JOIN METODO_ENTREGA metodo ON VEN.METODO_ENTREGA_ID = METODO.METODO_ENTREGA_ID\n" +
                            "WHERE\n" +
                            "EXTRACT(YEAR FROM ven.DATA_VENDA) =" + parametro + "\n" +
                            "GROUP BY \n" +
                            "ROLLUP(metodo.NOME,EXTRACT(MONTH FROM ven.DATA_VENDA))\n" +
                            "ORDER BY \n" +
                            "metodo.NOME,EXTRACT(MONTH FROM ven.DATA_VENDA)";
                break;
            
            case "Relatorio 2":                
                parametro = JOptionPane.showInputDialog("Ensira o ID do cliente");
                sqlquery =  "SELECT DISTINCT \n" +
                            "EXTRACT(YEAR FROM ven.DATA_VENDA) AS ANO,\n" +
                            "COUNT(ven.CLIENTE_ID) OVER (PARTITION BY EXTRACT(YEAR FROM ven.DATA_VENDA) ORDER BY EXTRACT(YEAR FROM ven.DATA_VENDA)) AS QTD_COMPRA,\n" +
                            "SUM(ven.TOTAL_DEVIDO) OVER (PARTITION BY EXTRACT(YEAR FROM ven.DATA_VENDA) ORDER BY EXTRACT(YEAR FROM ven.DATA_VENDA)) AS SOMA_COMPRA,  \n" +
                            "SUM(ven.TOTAL_DEVIDO) OVER () AS SOMA_TOTAL \n" +
                            "FROM \n" +
                            "VENDA ven INNER JOIN CLIENTE cli ON VEN.CLIENTE_ID = CLI.CLIENTE_ID\n" +
                            "WHERE \n" +
                            "VEN.CLIENTE_ID =" + parametro;
                
                break;            
        
            case "Relatorio 3":
                sqlquery =  "SELECT DISTINCT\n" +
                            "PAIS, \n" +
                            "ESTADO,\n" +
                            "COUNT(ESTADO) OVER (PARTITION BY ESTADO ORDER BY PAIS,ESTADO) as TOTAL_CLIENTE_ESTADO,\n" +
                            "COUNT(PAIS) OVER (PARTITION BY PAIS ORDER BY PAIS) as TOTAL_CLIENTE_PAIS,\n" +
                            "COUNT(PAIS) OVER () as TOTAL_MUNDO\n" +
                            "FROM(\n" +
                            "SELECT DISTINCT \n" +
                            "EST.PAIS     as PAIS,\n" +
                            "EST.NOME     as ESTADO, \n" +
                            "VEN.CLIENTE_ID,\n" +
                            "VEN.VENDA_ID,\n" +
                            "VEN.ENDERECO_ENTREGA \n" +
                            "FROM \n" +
                            "VENDA ven \n" +
                            "INNER JOIN CLIENTE cli ON VEN.CLIENTE_ID = CLI.CLIENTE_ID\n" +
                            "INNER JOIN ENDERECO ende ON VEN.ENDERECO_ENTREGA = ENDE.ENDERECO_ID\n" +
                            "INNER JOIN ESTADO est ON ENDE.ESTADO_ID = EST.ESTADO_ID\n" +
                            "ORDER BY PAIS,ESTADO\n" +
                            ")\n" +
                            "ORDER BY PAIS,ESTADO\n" 
                            ;
                break;
        
            case "Relatorio 4":
                parametro = JOptionPane.showInputDialog("Insira o mês desejado");
                sqlquery =  "SELECT DISTINCT\n" +
                            "ANO,\n" +
                            "MES,\n" +
                            "DIA,\n" +
                            "COUNT(TOTAL_DEVIDO) OVER (PARTITION BY DIA ORDER BY DIA) as SOMA\n" +
                            "FROM (\n" +
                            "SELECT DISTINCT \n" +
                            "EXTRACT(YEAR FROM ven.DATA_VENDA) AS ANO,\n" +
                            "EXTRACT(MONTH FROM ven.DATA_VENDA) AS MES,\n" +
                            "EXTRACT(DAY FROM ven.DATA_VENDA) AS DIA,\n" +
                            "VENDA_ID,\n" +
                            "VEN.TOTAL_DEVIDO TOTAL_DEVIDO\n" +
                            "FROM\n" +
                            "VENDA ven\n" +
                            "WHERE \n" +
                            "EXTRACT(MONTH FROM ven.DATA_VENDA) =" + parametro + "\n" +
                            "ORDER BY \n" +
                            "ANO,MES,DIA\n" +
                            ")\n" +
                            "ORDER BY ANO,DIA\n";
                break;

            case "Relatorio 5":
                parametro = JOptionPane.showInputDialog("Insira o ano desejado");
                sqlquery =  "SELECT DISTINCT\n" +
                            "MES,\n" +
                            "NOME,\n" +
                            "QTD_VEND,\n" +
                            "SUBCAT,\n" +
                            "SUBCAT_NOME,\n" +
                            "CATEGO,      \n" +
                            "DENSE_RANK() OVER (PARTITION BY SUBCAT,MES ORDER BY MES,QTD_VEND DESC) as RANKSUB,\n" +
                            "DENSE_RANK() OVER (PARTITION BY CATEGO,MES ORDER BY MES,QTD_VEND DESC,SUBCAT) as RANKCAT,\n" +
                            "DENSE_RANK() OVER (PARTITION BY MES ORDER BY MES,QTD_VEND DESC) RANK_GERAL,\n" +
                            "SUM(QTD_VEND) OVER (PARTITION BY SUBCAT,MES ORDER BY SUBCAT,MES) as TOTAL_SUBCAT,\n" +
                            "SUM(QTD_VEND) OVER (PARTITION BY CATEGO,MES ORDER BY CATEGO,MES) as TOTAL_CAT\n" +
                            "FROM (\n" +
                            "SELECT DISTINCT\n" +
                            "EXTRACT(MONTH FROM ven.DATA_VENDA) AS MES,\n" +
                            "vi.PRODUTO_ID,  \n" +
                            "pro.NOME as NOME,\n" +
                            "sub.SUBCATEGORIA_ID as SUBCAT,\n" +
                            "SUB.NOME as SUBCAT_NOME,\n" +
                            "sub.CATEGORIA CATEGO,\n" +
                            "COUNT(1) OVER (PARTITION BY vi.PRODUTO_ID,EXTRACT(MONTH FROM ven.DATA_VENDA) ORDER BY vi.PRODUTO_ID,EXTRACT(MONTH FROM ven.DATA_VENDA)) AS QTD_VEND,\n" +
                            "COUNT(1) OVER () AS QTD_TOTAL\n" +
                            "FROM \n" +
                            "VENDA ven \n" +
                            "INNER JOIN VENDA_ITEM vi ON ven.VENDA_ID = vi.VENDA_ID\n" +
                            "INNER JOIN PRODUTO pro ON vi.PRODUTO_ID = pro.PRODUTO_ID\n" +
                            "INNER JOIN SUBCATEGORIA sub ON pro.SUBCATEGORIA = sub.SUBCATEGORIA_ID\n" +
                            "WHERE \n" +
                            "EXTRACT(YEAR FROM ven.DATA_VENDA) =" + parametro + "\n" +
                            "ORDER BY MES, QTD_VEND DESC\n" +
                            ")\n" +
                            "ORDER BY MES,QTD_VEND DESC\n";
                break;
             
            case "Relatorio 6":
                parametro = JOptionPane.showInputDialog("Insira o ano desejado");                
                sqlquery =  "SELECT DISTINCT\n" +
                            "ANO,\n" +
                            "MES,\n" +
                            "SOMA_TOTAL_MES,\n" +
                            "LAG(SOMA_TOTAL_MES,1,0) OVER (ORDER BY MES) AS DIFF\n" +
                            "FROM(\n" +
                            "SELECT DISTINCT\n" +
                            "ANO,\n" +
                            "MES,\n" +
                            "SUM(TOTAL_DEVIDO) over (PARTITION BY MES ORDER BY MES) as SOMA_TOTAL_MES        \n" +
                            "FROM( \n" +
                            "SELECT \n" +
                            "EXTRACT(YEAR FROM ven.DATA_VENDA) as ANO,\n" +
                            "EXTRACT(MONTH FROM ven.DATA_VENDA) as MES,\n" +
                            "ven.TOTAL_DEVIDO as TOTAL_DEVIDO\n" +
                            "FROM \n" +
                            "VENDA ven \n" +
                            "WHERE \n" +
                            "EXTRACT(YEAR FROM ven.DATA_VENDA) =" + parametro + "\n" +
                            ")\n" +
                            "ORDER BY ANO,MES\n" +
                            ")\n" +
                            "ORDER BY ANO,MES\n";
                break;
        
            case "Relatorio 7":
                sqlquery =  "SELECT \n" +
                            "* \n" +
                            "FROM(\n" +
                            "SELECT DISTINCT\n" +
                            "prod1_id,\n" +
                            "nome1,\n" +
                            "cat1,\n" +
                            "prod2_id,\n" +
                            "nome2,\n" +
                            "cat2,\n" +
                            "Vezes,\n" +
                            "DENSE_RANK () OVER (ORDER BY VEZES DESC) as cat_rank,\n" +
                            "prod1_vezes,\n" +
                            "DENSE_RANK () OVER (ORDER BY prod1_vezes DESC) as prod1_rank,\n" +
                            "prod2_vezes,\n" +
                            "DENSE_RANK () OVER (ORDER BY prod2_vezes DESC) as prod2_rank\n" +
                            "FROM( \n" +
                            "SELECT \n" +
                            "prod1_id,\n" +
                            "nome1,\n" +
                            "cat1,\n" +
                            "prod2_id,\n" +
                            "nome2,\n" +
                            "cat2,\n" +
                            "COUNT(nome_concat) OVER (PARTITION BY nome_concat ORDER BY nome_concat) as Vezes,\n" +
                            "prod1_vezes,\n" +
                            "prod2_vezes\n" +
                            "FROM (\n" +
                            "SELECT \n" +
                            "PROD1.PRODUTO_ID as prod1_id,\n" +
                            "PROD2.PRODUTO_ID as prod2_id,\n" +
                            "PROD1.NOME AS nome1,\n" +
                            "SUBCAT1.CATEGORIA AS cat1,\n" +
                            "PROD2.NOME AS nome2,\n" +
                            "SUBCAT2.CATEGORIA AS cat2,\n" +
                            "PROD1.NOME || PROD2.NOME as nome_concat,\n" +
                            "COUNT(1) OVER (PARTITION BY prod1.nome) as prod1_vezes,\n" +
                            "COUNT(1) OVER (PARTITION BY prod2.nome) as prod2_vezes\n" +
                            "FROM \n" +
                            "VENDA_ITEM v1 INNER JOIN PRODUTO prod1 ON V1.PRODUTO_ID = PROD1.PRODUTO_ID INNER JOIN SUBCATEGORIA subcat1 ON PROD1.SUBCATEGORIA = SUBCAT1.SUBCATEGORIA_ID,\n" +
                            "VENDA_ITEM v2 INNER JOIN PRODUTO prod2 ON V2.PRODUTO_ID = PROD2.PRODUTO_ID INNER JOIN SUBCATEGORIA subcat2 ON PROD2.SUBCATEGORIA = SUBCAT2.SUBCATEGORIA_ID\n" +
                            "WHERE \n" +
                            "v1.VENDA_ID = v2.VENDA_ID AND V1.VENDA_ITEM_ID <> V2.VENDA_ITEM_ID AND V1.VENDA_ITEM_ID < V2.VENDA_ITEM_ID\n" +
                            ")\n" +
                            ")\n" +
                            ")\n" +
                            "WHERE CAT_RANK < 10\n" +
                            "ORDER BY nome1,cat_rank\n";
                break;
        
            case "Relatorio 8":
                parametro = JOptionPane.showInputDialog("Insira o ano desejado");
                sqlquery =  "SELECT DISTINCT\n" +
                            "EST.NOME as ESTADO,\n" +
                            "EXTRACT(MONTH FROM ve.DATA_VENDA) AS MES,\n" +
                            "SUM(ve.IMPOSTOS) over (PARTITION BY est.ESTADO_ID,EXTRACT(MONTH FROM ve.DATA_VENDA)) AS SOMA_MES_ESTADO,\n" +
                            "SUM(ve.IMPOSTOS) over (PARTITION BY est.ESTADO_ID) AS SOMA_MES_ANO,\n" +
                            "SUM(ve.IMPOSTOS) over (ORDER BY EXTRACT(MONTH FROM ve.DATA_VENDA)) AS SOMA_TOTAL_MES,\n" +
                            "SUM(ve.IMPOSTOS) over () AS SOMA_TOTAL_ANO\n" +
                            "FROM \n" +
                            "VENDA ve \n" +
                            "INNER JOIN ENDERECO ende ON VE.ENDERECO_COBRANCA = ENDE.ENDERECO_ID\n" +
                            "INNER JOIN ESTADO est ON ENDE.ESTADO_ID = est.ESTADO_ID\n" +
                            "WHERE EXTRACT(YEAR FROM ve.DATA_VENDA) =" + parametro + "\n" +
                            "ORDER BY ESTADO,MES\n";
                break;
                
            case "Relatorio 9":
                sqlquery =  "SELECT DISTINCT\n" +
                            "PAIS,\n" +
                            "ESTADO,\n" +
                            "ROUND((SOMA_ESTADO/SOMA_PAIS)*100,4) AS perc_est_pais,\n" +
                            "ROUND((SOMA_ESTADO/SOMA_MUNDO)*100,4) AS perc_est_mundo\n" +
                            "FROM \n" +
                            "(\n" +
                            "SELECT DISTINCT\n" +
                            "EST.PAIS AS PAIS,\n" +
                            "EST.NOME AS ESTADO,\n" +
                            "SUM(VE.TOTAL_DEVIDO) OVER (PARTITION BY EST.PAIS,EST.NOME) AS SOMA_ESTADO,\n" +
                            "SUM(VE.TOTAL_DEVIDO) OVER (PARTITION BY EST.PAIS) AS SOMA_PAIS,\n" +
                            "SUM(VE.TOTAL_DEVIDO) OVER () AS SOMA_MUNDO\n" +
                            "FROM \n" +
                            "VENDA ve \n" +
                            "INNER JOIN ENDERECO ende ON VE.ENDERECO_COBRANCA = ENDE.ENDERECO_ID\n" +
                            "INNER JOIN ESTADO est ON ENDE.ESTADO_ID = est.ESTADO_ID\n" +
                            "ORDER BY \n" +
                            "EST.PAIS,EST.NOME\n" +
                            ")\n" +
                            "ORDER BY PAIS,perc_est_mundo DESC\n";
                break;
        }
            
        try {         
       
         jTable1.setModel(tentativa.relatorio(sqlquery)); 
            //jTable1.setModel();
        } catch (SQLException ex) {
            Logger.getLogger(GuiDB.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(loginGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(loginGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(loginGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(loginGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiDB().setVisible(true);
            }
        });
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
