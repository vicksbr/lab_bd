Relatorio

1) conversar sobre, adicionar total todas com um comando analitico no SELECT * FROM (SUB QUERY) 

CREATE GLOBAL TEMPORARY TABLE tabela1
on commit preserve rows
AS
(SELECT * FROM (
  SELECT DISTINCT
  METODO.METODO_ENTREGA_ID,
  metodo.NOME,
  EXTRACT(MONTH FROM ven.DATA_VENDA) AS MES,
  SUM(VEN.FRETE) OVER (PARTITION BY metodo.NOME,EXTRACT(MONTH FROM ven.DATA_VENDA) ORDER BY metodo.METODO_ENTREGA_ID) SUB_MENOR_MES ,
  SUM(VEN.FRETE) OVER (PARTITION BY metodo.NOME,EXTRACT(YEAR FROM ven.DATA_VENDA) ORDER BY METODO.METODO_ENTREGA_ID) AS SUB_MENOR_ANO,
  SUM(VEN.FRETE) OVER (ORDER BY METODO.METODO_ENTREGA_ID) AS TOTAL_TODAS
  FROM VENDA ven INNER JOIN METODO_ENTREGA metodo ON VEN.METODO_ENTREGA_ID = METODO.METODO_ENTREGA_ID
  WHERE EXTRACT(YEAR FROM ven.DATA_VENDA) = 2011 AND VEN.SUBTOTAL < 1000 /* ano escolhido */ 
  ORDER BY metodo.NOME, MES
))

;

CREATE GLOBAL TEMPORARY TABLE tabela2
on commit preserve rows
AS 
  SELECT DISTINCT
  METODO.METODO_ENTREGA_ID,
  metodo.NOME,
  EXTRACT(MONTH FROM ven.DATA_VENDA) AS MES,
  SUM(VEN.FRETE) OVER (PARTITION BY metodo.NOME,EXTRACT(MONTH FROM ven.DATA_VENDA) ORDER BY metodo.METODO_ENTREGA_ID) SUB_MAIOR_MES ,
  SUM(VEN.FRETE) OVER (PARTITION BY metodo.NOME,EXTRACT(YEAR FROM ven.DATA_VENDA) ORDER BY METODO.METODO_ENTREGA_ID) AS SUB_MAIOR_ANO,
  SUM(VEN.FRETE) OVER (ORDER BY METODO.METODO_ENTREGA_ID) AS TOTAL_TODAS
  FROM VENDA ven INNER JOIN METODO_ENTREGA metodo ON VEN.METODO_ENTREGA_ID = METODO.METODO_ENTREGA_ID
  WHERE EXTRACT(YEAR FROM ven.DATA_VENDA) = 2011 AND VEN.SUBTOTAL > 1000 /* ano escolhido */ 
  ORDER BY metodo.NOME, MES
;

SELECT
        TABELA2.NOME, 
        TABELA2.MES, 
        TABELA1.SUB_MENOR_MES,
        TABELA1.SUB_MENOR_ANO,
        TABELA2.SUB_MAIOR_MES,
        TABELA2.SUB_MAIOR_ANO,
        TABELA2.TOTAL_TODAS
FROM
        tabela1 full join tabela2 on TABELA1.MES = TABELA2.MES
ORDER BY 
        NOME,MES
;

TRUNCATE TABLE tabela1;
TRUNCATE TABLE tabela2;
drop table tabela1;
drop table tabela2;

2) Parece perfeito

SELECT DISTINCT 
    EXTRACT(YEAR FROM ven.DATA_VENDA) AS ANO,
    COUNT(ven.CLIENTE_ID) OVER (PARTITION BY EXTRACT(YEAR FROM ven.DATA_VENDA) ORDER BY EXTRACT(YEAR FROM ven.DATA_VENDA)) AS QTD_COMPRA,
    SUM(ven.TOTAL_DEVIDO) OVER (PARTITION BY EXTRACT(YEAR FROM ven.DATA_VENDA) ORDER BY EXTRACT(YEAR FROM ven.DATA_VENDA)) AS SOMA_COMPRA  
 FROM 
    VENDA ven INNER JOIN CLIENTE cli ON VEN.CLIENTE_ID = CLI.CLIENTE_ID
WHERE 
    VEN.CLIENTE_ID = 13668;


3) parece perfeito

SELECT DISTINCT
  PAIS, 
  ESTADO,
  COUNT(ESTADO) OVER (PARTITION BY ESTADO ORDER BY PAIS,ESTADO) as TOTAL_CLIENTE_ESTADO,
  COUNT(PAIS) OVER (PARTITION BY PAIS ORDER BY PAIS) as TOTAL_CLIENTE_PAIS,
  COUNT(PAIS) OVER () as TOTAL_MUNDO
  FROM(
        SELECT DISTINCT 
            EST.PAIS     as PAIS,
            EST.NOME     as ESTADO, 
            VEN.CLIENTE_ID,
            VEN.VENDA_ID,
            VEN.ENDERECO_ENTREGA 
        FROM 
            VENDA ven 
            INNER JOIN CLIENTE cli ON VEN.CLIENTE_ID = CLI.CLIENTE_ID
            INNER JOIN ENDERECO ende ON VEN.ENDERECO_ENTREGA = ENDE.ENDERECO_ID
            INNER JOIN ESTADO est ON ENDE.ESTADO_ID = EST.ESTADO_ID
        ORDER BY PAIS,ESTADO
      )
ORDER BY PAIS,ESTADO
;




4) FALTA FAZER A média vendida entre os 2 dias anteriores e os 2 dias seguintes. Perguntar se é o que eu to pensadno

SELECT DISTINCT
  ANO,
  MES,
  DIA,
  COUNT(TOTAL_DEVIDO) OVER (PARTITION BY DIA ORDER BY DIA) as SOMA
FROM (
      SELECT DISTINCT 
          EXTRACT(YEAR FROM ven.DATA_VENDA) AS ANO,
          EXTRACT(MONTH FROM ven.DATA_VENDA) AS MES,
          EXTRACT(DAY FROM ven.DATA_VENDA) AS DIA,
          VENDA_ID,
          VEN.TOTAL_DEVIDO TOTAL_DEVIDO
      FROM
          VENDA ven
      WHERE 
          EXTRACT(MONTH FROM ven.DATA_VENDA) = 10
      ORDER BY 
          ANO,MES,DIA
      )
ORDER BY ANO,DIA
;


5)	– Para cada Subcategoria, o número de itens vendidos, total vendido,
	ranking da categoria e ranking geral (pelo total vendido);
	– Para cada Categoria, o número de itens vendidos, total vendido e
	ranking geral (pelo total vendido);


SELECT DISTINCT
      MES,
      NOME,
      QTD_VEND,
      SUBCAT,
      SUBCAT_NOME,
      CATEGO,
      DENSE_RANK() OVER (PARTITION BY SUBCAT,MES ORDER BY MES,QTD_VEND DESC) as RANKSUB,
      DENSE_RANK() OVER (PARTITION BY CATEGO,MES ORDER BY MES,QTD_VEND DESC,SUBCAT) as RANKCAT,
      DENSE_RANK() OVER (ORDER BY QTD_VEND DESC) RANK_GERAL
  FROM (
        SELECT DISTINCT
          EXTRACT(MONTH FROM ven.DATA_VENDA) AS MES,
          vi.PRODUTO_ID,  
          pro.NOME as NOME,
          sub.SUBCATEGORIA_ID as SUBCAT,
          SUB.NOME as SUBCAT_NOME,
          sub.CATEGORIA CATEGO,
          COUNT(1) OVER (PARTITION BY vi.PRODUTO_ID,EXTRACT(MONTH FROM ven.DATA_VENDA) ORDER BY vi.PRODUTO_ID,EXTRACT(MONTH FROM ven.DATA_VENDA)) AS QTD_VEND,
          COUNT(1) OVER () AS QTD_TOTAL
        FROM 
          VENDA ven 
          INNER JOIN VENDA_ITEM vi ON ven.VENDA_ID = vi.VENDA_ID
          INNER JOIN PRODUTO pro ON vi.PRODUTO_ID = pro.PRODUTO_ID
          INNER JOIN SUBCATEGORIA sub ON pro.SUBCATEGORIA = sub.SUBCATEGORIA_ID
        WHERE 
          EXTRACT(YEAR FROM ven.DATA_VENDA) = 2013
        ORDER BY MES, QTD_VEND DESC
        )
ORDER BY MES,QTD_VEND DESC
;


SELECT 
  count(1)
FROM 
  VENDA ven 
  INNER JOIN VENDA_ITEM vi ON ven.VENDA_ID = vi.VENDA_ID
  INNER JOIN PRODUTO pro ON vi.PRODUTO_ID = pro.PRODUTO_ID
  INNER JOIN SUBCATEGORIA sub ON pro.SUBCATEGORIA = sub.SUBCATEGORIA_ID
WHERE 
  EXTRACT(YEAR FROM ven.DATA_VENDA) = 2013 AND EXTRACT(MONTH FROM ven.DATA_VENDA) = 2 AND SUB.SUBCATEGORIA_ID = 1
;